<?php
// $Id: system.module,v 1.440.2.48 2009/02/25 23:14:05 drumm Exp $

/**
 * @file
 * Configuration system that lets administrators modify the workings of the site.
 */

define('VERSION', '5.16');

function system_help($section) {
  if (strpos($section, 'admin') === 0) {
    include_once dirname(__FILE__).'/admin.inc.php';
    return _system_help($section);
  }
}

/**
 * Implementation of hook_perm().
 */
function system_perm() {
  return array('administer site configuration', 'access administration pages', 'select different theme');
}

/**
 * Implementation of hook_elements().
 */
function system_elements() {
  // Top level form
  $type['form'] = array('#method' => 'post', '#action' => request_uri());

  // Inputs
  $type['checkbox'] = array('#input' => TRUE, '#return_value' => 1);
  $type['submit'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => TRUE);
  $type['button'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => FALSE);
  $type['textfield'] = array('#input' => TRUE, '#size' => 60, '#maxlength' => 128, '#autocomplete_path' => FALSE);
  $type['password'] = array('#input' => TRUE, '#size' => 60);
  $type['password_confirm'] = array('#input' => TRUE, '#process' => array('expand_password_confirm' => array()));
  $type['textarea'] = array('#input' => TRUE, '#cols' => 60, '#rows' => 5);
  $type['radios'] = array('#input' => TRUE, '#process' => array('expand_radios' => array()));
  $type['radio'] = array('#input' => TRUE);
  $type['checkboxes'] = array('#input' => TRUE, '#process' => array('expand_checkboxes' => array()), '#tree' => TRUE);
  $type['select'] = array('#input' => TRUE);
  $type['weight'] = array('#input' => TRUE, '#delta' => 10, '#default_value' => 0, '#process' => array('process_weight' => array()));
  $type['date'] = array('#input' => TRUE, '#process' => array('expand_date' => array()), '#validate' => array('date_validate' => array()));
  $type['file'] = array('#input' => TRUE, '#size' => 60);

  // Form structure
  $type['item'] = array();
  $type['hidden'] = array('#input' => TRUE);
  $type['value'] = array('#input' => TRUE);
  $type['markup'] = array('#prefix' => '', '#suffix' => '');
  $type['fieldset'] = array('#collapsible' => FALSE, '#collapsed' => FALSE);
  $type['token'] = array('#input' => TRUE);
  return $type;
}

/**
 * Implementation of hook_menu().
 */
function system_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    include_once dirname(__FILE__).'/menu.inc.php';
    _system_menu_may_cache($items);
  }
  else {
    /**
     * Use the administrative theme if the user is looking at a page in the admin/* path.
     */
    if (arg(0) == 'admin') {
      global $custom_theme;
      $custom_theme = variable_get('admin_theme', '0');
      drupal_add_css(drupal_get_path('module', 'system') .'/admin.css', 'module');
    }

    // Add the CSS for this module. We put this in !$may_cache so it is only
    // added once per request.
    drupal_add_css(drupal_get_path('module', 'system') .'/defaults.css', 'module');
    drupal_add_css(drupal_get_path('module', 'system') .'/system.css', 'module');
  }

  return $items;
}

function system_user($type, $edit, &$user, $category = NULL) {
  include_once dirname(__FILE__).'/system_user.inc.php';
  return _system_user($type, $edit, $user, $category);
}

function system_main_admin_page($arg = NULL) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_main_admin_page($arg);
}

function system_admin_menu_block_page() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_admin_menu_block_page();
}

function system_admin_compact_page($mode = 'off') {
  global $user;
  user_save($user, array('admin_compact_mode' => ($mode == 'on')));
  drupal_goto('admin');
}

function system_admin_theme_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_admin_theme_settings();
}

function system_theme_select_form($description = '', $default_value = '', $weight = 0) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_theme_select_form($description, $default_value, $weight);
}

function _system_zonelist() {
  $timestamp = time();
  $zonelist = array(-11, -10, -9.5, -9, -8, -7, -6, -5, -4, -3.5, -3, -2, -1, 0, 1, 2, 3, 3.5, 4, 5, 5.5, 5.75, 6, 6.5, 7, 8, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 14);
  $zones = array();
  foreach ($zonelist as $offset) {
    $zone = $offset * 3600;
    $zones[$zone] = format_date($timestamp, 'custom', variable_get('date_format_long', 'l, F j, Y - H:i') .' O', $zone);
  }
  return $zones;
}

function system_site_information_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_site_information_settings();
}

function system_clean_url_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_clean_url_settings();
}

function system_error_reporting_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_error_reporting_settings();
}

function system_performance_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_performance_settings();
}

function system_file_system_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_file_system_settings();
}

function system_image_toolkit_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_file_system_settings();
}

function system_rss_feeds_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_rss_feeds_settings();
}

function system_date_time_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_date_time_settings();
}

function system_site_maintenance_settings() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_site_maintenance_settings();
}

/**
 * Retrieves the current status of an array of files in the system table.
 */
function system_get_files_database(&$files, $type) {
  // Extract current files from database.
  $result = db_query("SELECT filename, name, type, status, throttle, schema_version FROM {system} WHERE type = '%s'", $type);
  while ($file = db_fetch_object($result)) {
    if (isset($files[$file->name]) && is_object($files[$file->name])) {
      $file->old_filename = $file->filename;
      foreach ($file as $key => $value) {
        if (!isset($files[$file->name]) || !isset($files[$file->name]->$key)) {
          $files[$file->name]->$key = $value;
        }
      }
    }
  }
}

function system_theme_data() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_theme_data();
}

/**
 * Get a list of available regions from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @return
 *   An array of regions in the form $region['name'] = 'description'.
 */
function system_region_list($theme_key) {
  static $list = array();

  if (!array_key_exists($theme_key, $list)) {
    $theme = db_fetch_object(db_query("SELECT * FROM {system} WHERE type = 'theme' AND name = '%s'", $theme_key));

    // Stylesheets can't have regions; use its theme.
    if (strpos($theme->filename, '.css')) {
      return system_region_list(basename(dirname($theme->description)));
    }

    // If this is a custom theme, load it in before moving on.
    if (file_exists($file = dirname($theme->filename) .'/'. $theme_key .'.theme')) {
      include_once "./$file";
    }

    $regions = array();

    // This theme has defined its own regions.
    if (function_exists($theme_key .'_regions')) {
      $regions = call_user_func($theme_key .'_regions');
    }
    // File is an engine; include its regions.
    else if (strpos($theme->description, '.engine')) {
      include_once './'. $theme->description;
      $theme_engine = basename($theme->description, '.engine');
      $regions = function_exists($theme_engine .'_regions') ? call_user_func($theme_engine .'_regions') : array();
    }

    $list[$theme_key] = $regions;
  }

  return $list[$theme_key];
}

/**
 * Get the name of the default region for a given theme.
 *
 * @param $theme
 *   The name of a theme.
 * @return
 *   A string that is the region name.
 */
function system_default_region($theme) {
  $regions = array_keys(system_region_list($theme));
  return $regions[0];
}

/**
 * Assign an initial, default set of blocks for a theme.
 *
 * This function is called the first time a new theme is enabled. The new theme
 * gets a copy of the default theme's blocks, with the difference that if a
 * particular region isn't available in the new theme, the block is assigned
 * to the new theme's default region.
 *
 * @param $theme
 *   The name of a theme.
 */
function system_initialize_theme_blocks($theme) {
  // Initialize theme's blocks if none already registered.
  if (!(db_num_rows(db_query("SELECT module FROM {blocks} WHERE theme = '%s'", $theme)))) {
    $default_theme = variable_get('theme_default', 'garland');
    $regions = system_region_list($theme);
    $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s'", $default_theme);
    while ($block = db_fetch_array($result)) {
      // If the region isn't supported by the theme, assign the block to the theme's default region.
      if (!array_key_exists($block['region'], $regions)) {
        $block['region'] = system_default_region($theme);
      }
      db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, visibility, pages, custom, throttle) VALUES ('%s', '%s', '%s', %d, %d, '%s', %d, '%s', %d, %d)",
          $block['module'], $block['delta'], $theme, $block['status'], $block['weight'], $block['region'], $block['visibility'], $block['pages'], $block['custom'], $block['throttle']);
    }
  }
}

/**
 * Add default buttons to a form and set its prefix
 */
function system_settings_form($form) {
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#base'] = 'system_settings_form';
  return $form;
}

/**
 * Execute the system_settings_form.
 *
 * If you want node type configure style handling of your checkboxes,
 * add an array_filter value to your form.
 *
 */
function system_settings_form_submit($form_id, $form_values) {
  $op = isset($form_values['op']) ? $form_values['op'] : '';

  // Exclude unnecessary elements.
  unset($form_values['submit'], $form_values['reset'], $form_values['form_id'], $form_values['op'], $form_values['form_token']);

  foreach ($form_values as $key => $value) {
    if ($op == t('Reset to defaults')) {
      variable_del($key);
    }
    else {
      if (is_array($value) && isset($form_values['array_filter'])) {
        $value = array_keys(array_filter($value));
      }
      variable_set($key, $value);
    }
  }
  if ($op == t('Reset to defaults')) {
    drupal_set_message(t('The configuration options have been reset to their default values.'));
  }
  else {
    drupal_set_message(t('The configuration options have been saved.'));
  }

  menu_rebuild();
}

function system_themes() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_themes();
}



function system_modules($form_values = NULL) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_modules($form_values);
}

function system_sort_modules_by_info_name($a, $b) {
  return strcasecmp($a->info['name'], $b->info['name']);
}

/**
 * Uninstall functions
 */
function system_modules_uninstall($form_values = NULL) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_modules_uninstall($form_values);
}

function system_run_cron() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_run_cron();
}

/**
 * Menu callback: return information about PHP.
 */
function system_php() {
  phpinfo(INFO_GENERAL | INFO_CONFIGURATION);
  exit();
}

function system_sql() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return real_system_sql();
}

function system_status($check = FALSE) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_status($check);
}

function system_settings_overview() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_settings_overview($check);
}

function system_theme_settings($key = '') {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_theme_settings($key);
}

/**
 * Implementation of hook_node_type().
 *
 * Updates theme settings after a node type change.
 */
function system_node_type($op, $info) {
  if ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    $old = 'toggle_node_info_'. $info->old_type;
    $new = 'toggle_node_info_'. $info->type;

    $theme_settings = variable_get('theme_settings', array());
    if (isset($theme_settings[$old])) {
      $theme_settings[$new] = $theme_settings[$old];
      unset($theme_settings[$old]);
      variable_set('theme_settings', $theme_settings);
    }
  }
}

/**
 * Output a confirmation form
 *
 * This function returns a complete form for confirming an action. A link is
 * offered to go back to the item that is being changed in case the user 
 * changes his/her mind.
 *
 * If the submit handler for this form is invoked, the user successfully
 * confirmed the action. You should never directly inspect $_POST to see if an
 * action was confirmed.
 *
 * @param $form
 *   Additional elements to inject into the form, for example hidden elements.
 * @param $question
 *   The question to ask the user (e.g. "Are you sure you want to delete the
 *   block <em>foo</em>?").
 * @param $path
 *   The page to go to if the user denies the action.
 *   Can be either a drupal path, or an array with the keys 'path', 'query', 'fragment'.
 * @param $description
 *   Additional text to display (defaults to "This action cannot be undone.").
 * @param $yes
 *   A caption for the button which confirms the action (e.g. "Delete",
 *   "Replace", ...).
 * @param $no
 *   A caption for the link which denies the action (e.g. "Cancel").
 * @param $name
 *   The internal name used to refer to the confirmation item.
 * @return
 *   The form.
 */
function confirm_form($form, $question, $path, $description = NULL, $yes = NULL, $no = NULL, $name = 'confirm') {
  $description = isset($description) ? $description : t('This action cannot be undone.');

  // Prepare cancel link
  $query = $fragment = NULL;
  if (is_array($path)) {
    $query = isset($path['query']) ? $path['query'] : NULL;
    $fragment = isset($path['fragment']) ? $path['fragment'] : NULL;
    $path = isset($path['path']) ? $path['path'] : NULL;
  }
  $cancel = l($no ? $no : t('Cancel'), $path, array(), $query, $fragment);

  drupal_set_title($question);

  $form['#attributes'] = array('class' => 'confirmation');
  $form['description'] = array('#value' => $description);
  $form[$name] = array('#type' => 'hidden', '#value' => 1);

  $form['actions'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => $yes ? $yes : t('Confirm'));
  $form['actions']['cancel'] = array('#value' => $cancel);
  $form['#base'] = 'confirm_form';
  return $form;
}

function system_admin_by_module() {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _system_admin_by_module();
}
